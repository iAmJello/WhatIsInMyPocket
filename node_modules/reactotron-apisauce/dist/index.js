'use strict';

var ramda = require('ramda');
var ramdasauce = require('ramdasauce');

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};























































var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/**
 * Don't include the response bodies for images by default.
 */
var DEFAULT_CONTENT_TYPES_RX = /^(image)\/.*$/i;

/**
 * Sets up the apisauce reactotron plugin
 */
var index = (function () {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (reactotron) {
    // a RegExp to suppess adding the body cuz it costs a lot to serialize
    var ignoreContentTypes = options.ignoreContentTypes || DEFAULT_CONTENT_TYPES_RX;

    // apisauce uses axios, so let's deconstruct that format
    var convertResponse = function convertResponse(source) {
      // the request
      var url = ramdasauce.dotPath('config.url', source);
      var method = ramdasauce.dotPath('config.method', source);
      var requestData = ramdasauce.dotPath('config.data', source);
      var requestHeaders = ramdasauce.dotPath('config.headers', source);
      var requestParams = ramdasauce.dotPath('config.params', source);
      var request = {
        url: url, method: method, data: requestData || null, headers: requestHeaders, params: requestParams || null
      };

      // there response
      var status = ramdasauce.dotPath('status', source);
      var responseHeaders = ramdasauce.dotPath('headers', source) || {};
      var contentType = responseHeaders['content-type'] || responseHeaders['Content-Type'];
      var bodyData = ramdasauce.dotPath('data', source);
      var useRealBody = (typeof bodyData === 'string' || (typeof bodyData === 'undefined' ? 'undefined' : _typeof(bodyData)) === 'object') && !ramda.test(ignoreContentTypes, contentType || '');
      var body = useRealBody ? bodyData : '~~~ skipped ~~~';
      var response = { body: body, status: status, headers: responseHeaders };

      // the duration
      var duration = ramdasauce.dotPath('duration', source);

      // return all 3
      return [request, response, duration];
    };
    return {
      features: {
        apisauce: function apisauce(source) {
          return reactotron.apiResponse.apply(reactotron, toConsumableArray(convertResponse(source)));
        }
      }
    };
  };
});

module.exports = index;
