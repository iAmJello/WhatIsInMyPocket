{"version":3,"sources":["RoundedButtonTest.js"],"names":["wrapper","t","is","length","name","children","first","props","i","onPress","wrapperPress","prop","simulate","wrapperChild"],"mappings":";AACA,wB;AACA,4B;AACA,iE;AACA,8B;;;AAGA,GAAMA,SAAU,oBAAQ,uDAAe,QAAS,kBAAM,CAAE,CAAhC,CAAkC,KAAK,OAAvC,EAAR,CAAhB;;AAEA,kBAAK,kBAAL,CAAyB,SAACC,CAAD,CAAO;AAC9BA,EAAEC,EAAF,CAAKF,QAAQG,MAAb,CAAqB,CAArB;AACD,CAFD;;AAIA,kBAAK,qBAAL,CAA4B,SAACF,CAAD,CAAO;AACjCA,EAAEC,EAAF,CAAKF,QAAQI,IAAR,EAAL,CAAqB,kBAArB;AACAH,EAAEC,EAAF,CAAKF,QAAQK,QAAR,GAAmBF,MAAxB,CAAgC,CAAhC;AACAF,EAAEC,EAAF,CAAKF,QAAQK,QAAR,GAAmBC,KAAnB,GAA2BF,IAA3B,EAAL,CAAwC,MAAxC;AACD,CAJD;;AAMA,kBAAK,sCAAL,CAA6C,SAACH,CAAD,CAAO;AAClDA,EAAEC,EAAF,CAAKF,QAAQK,QAAR,GAAmBC,KAAnB,GAA2BC,KAA3B,GAAmCF,QAAxC,CAAkD,OAAlD;AACD,CAFD;;AAIA,kBAAK,SAAL,CAAgB,SAACJ,CAAD,CAAO;AACrB,GAAIO,GAAI,CAAR;AACA,GAAMC,SAAU,QAAVA,QAAU,SAAMD,IAAN,EAAhB;AACA,GAAME,cAAe,oBAAQ,uDAAe,QAASD,OAAxB,CAAiC,KAAK,IAAtC,EAAR,CAArB;;AAEAR,EAAEC,EAAF,CAAKQ,aAAaC,IAAb,CAAkB,SAAlB,CAAL,CAAmCF,OAAnC;AACAR,EAAEC,EAAF,CAAKM,CAAL,CAAQ,CAAR;AACAE,aAAaE,QAAb,CAAsB,OAAtB;AACAX,EAAEC,EAAF,CAAKM,CAAL,CAAQ,CAAR;AACD,CATD;;AAWA,kBAAK,mCAAL,CAA0C,SAACP,CAAD,CAAO;AAC/C,GAAMY,cAAe,oBAAQ,uDAAe,QAAS,kBAAM,CAAE,CAAhC,UAAR,CAArB;AACAZ,EAAEC,EAAF,CAAKW,aAAaR,QAAb,GAAwBF,MAA7B,CAAqC,CAArC;AACAF,EAAEC,EAAF,CAAKW,aAAaR,QAAb,GAAwBC,KAAxB,GAAgCF,IAAhC,EAAL,CAA6C,MAA7C;AACD,CAJD","file":"RoundedButtonTest.js","sourcesContent":["// https://github.com/airbnb/enzyme/blob/master/docs/api/shallow.md\nimport test from 'ava'\nimport React from 'react'\nimport RoundedButton from '../../App/Components/RoundedButton'\nimport { shallow } from 'enzyme'\n\n// Basic wrapper\nconst wrapper = shallow(<RoundedButton onPress={() => {}} text='howdy' />)\n\ntest('component exists', (t) => {\n  t.is(wrapper.length, 1) // exists\n})\n\ntest('component structure', (t) => {\n  t.is(wrapper.name(), 'TouchableOpacity') // the right root component\n  t.is(wrapper.children().length, 1) // has 1 child\n  t.is(wrapper.children().first().name(), 'Text') // that child is Text\n})\n\ntest('the text is set properly - uppercase', (t) => {\n  t.is(wrapper.children().first().props().children, 'HOWDY')\n})\n\ntest('onPress', (t) => {\n  let i = 0 // i guess i could have used sinon here too... less is more i guess\n  const onPress = () => i++\n  const wrapperPress = shallow(<RoundedButton onPress={onPress} text='hi' />)\n\n  t.is(wrapperPress.prop('onPress'), onPress) // uses the right handler\n  t.is(i, 0)\n  wrapperPress.simulate('press')\n  t.is(i, 1)\n})\n\ntest('renders children text when passed', (t) => {\n  const wrapperChild = shallow(<RoundedButton onPress={() => {}}>Howdy</RoundedButton>)\n  t.is(wrapperChild.children().length, 1) // has 1 child\n  t.is(wrapperChild.children().first().name(), 'Text') // that child is Text\n})\n"]}